# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <0 "orgs/programming-for-data-science/repos"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "orgs/programming-for-data-science/repos"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
print(request)
request <- GET(paste0(base_uri, org_resource))
print(request)
content <- content(request)
content_df <- fromJSON(content)
content
typeof(request)
content
typeof(content)
content_df <- fromJSON(content)
content_df <- as.data.frame(content)
View(content)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
request <- GET(paste0(base_uri, org_resource))
print(request)
data <- content(request)
request
View(data)
View(data)
View(data)
View(data)
View(data)
View(request)
View(request)
data <- request$content
content_df <- fromJSON(data)
data <- content(request)
data <- content(request, type="text")
content_df <- fromJSON(data)
View(content_df)
nrow(content_df)
query_params = list("q":"machine learning")
query_params = list(q="machine learning")
View(query_params)
View(query_params)
search <- GET(paste0(base_uri, org_resource), query_params)
print(search)
search <- GET(paste0(base_uri, search_endpoint), query_params)
search_endpoint <- "/search/repositories"
query_params = list(q="machine learning")
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
search_endpoint <- "/search/repositories"
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
query_params = list(q="machine learning", order="desc")
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
query_params = list(q="machine", order="desc")
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
query_params = list(q="machine learning", order="")
query_params = list(q="machine learning", order="desc")
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-14-exercises/exercise-1/exercise.R', echo=TRUE)
query_params = list(q="machine learning", order="desc")
search <- GET(paste0(base_uri, search_endpoint), query_params)
print(search)
