# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
nrow(unique(makers))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
count(unique(makers))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
n(unique(makers))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makers))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- order(vehicles$hwy)
cars_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- order(cars_1997$hwy)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy)]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997,]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy)]
View(cars_1997)
View(cars_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy, na.last = TRUE)]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy, na.last = TRUE)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy),]
??mutate
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_2_wheel_20_milage <- vehicles[(vehicles$drive == "Rear-Wheel Drive" | vehicles$drive == "Front-Wheel Drive") & vehicles$cty > 20,]
View(cars_2_wheel_20_milage)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_2_wheel_20_milage <- cars_2_wheel_milage[cars_2_wheel_milage$hwy == min(cars_2_wheel_milage$hwy),"id"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_2_wheel_20_milage <- vehicles[(vehicles$drive == "Rear-Wheel Drive" | vehicles$drive == "Front-Wheel Drive") & vehicles$cty > 20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_2_wheel_20_milage <- cars_2_wheel_milage[cars_2_wheel_milage$hwy == min(cars_2_wheel_milage$hwy),"id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_2_wheel_20_milage <- cars_2_wheel_20_milage[cars_2_wheel_20_milage$hwy == min(cars_2_wheel_20_milage$hwy),"id"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_2_wheel_20_milage <- vehicles[(vehicles$drive == "Rear-Wheel Drive" | vehicles$drive == "Front-Wheel Drive") & vehicles$cty > 20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_2_wheel_20_milage <- cars_2_wheel_20_milage[cars_2_wheel_20_milage$hwy == min(cars_2_wheel_20_milage$hwy),"id"]
View(cars_2_wheel_20_milage)
View(cars_2_wheel_20_milage)
return possible_cars[possible_cars$hwy == max(possible_cars$hwy),"model"]
best_mpg_car <- function(year_choice, make_choice) {
possible_cars <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
return possible_cars[possible_cars$hwy == max(possible_cars$hwy),"model"]
}
return (possible_cars[possible_cars$hwy == max(possible_cars$hwy),"model"])
best_mpg_car <- function(year_choice, make_choice) {
possible_cars <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
return (possible_cars[possible_cars$hwy == max(possible_cars$hwy),"model"])
}
# What was the most efficient Honda model of 1995?
print(best_mpg_car(1995, "Honda"))
library(dplyr)
library(dplyr)
select(vehicles, name)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
select(vehicles, name)
View(vehicles)
select(vehicles, model)
select(vehicles, make, model)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
libary(dplyr)
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
view(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nyc_flights <- flights
print(nrows(flights))
print(nrow(flights))
print(ncol(flights))
print(nrow(flights))
print(ncol(flights))
print(colnames(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, flight_delay = arr_delay - dep_delay)
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, flight_delay = arr_delay - dep_delay)
select(flights, flight_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, flight_delay = arr_delay - dep_delay)
select(flights, flight_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- flights[order(flights$flight_delay)]
my_flight <- select(fligts, origin = "EWR")
my_flight <- select(flights, origin = "EWR")
my_flight <- select(flights, origin == "EWR")
my_flight <- select(flights, origin)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, flight_delay)
View(flights)
View(flights)
my_flight <- flights[flights$origin == "EWR" & flights$dest == "SEA", ]
View(my_flight)
View(my_flight)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(flight_delay, na.rm = TRUE))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$flight_delay)
to_seatac <- select(flights, dest="SEA")
to_seatac <- select(flights, dest=="SEA")
to_seatac <- filter(flights, dest=="SEA")
to_seatac <- select(to_seatac, origin, destination, flight_delay)
to_seatac <- select(to_seatac, origin, dest, flight_delay)
View(to_seatac)
View(to_seatac)
mean(to_seatac$flight_delay)
mean(to_seatac$flight_delay)
to_seatac$flight_delay
mean(to_seatac$flight_delay, na.rm = TRUE)
group_by(to_seatac, origin)
select(to_seatac, origin="JFK") %>% summarize(mean = mean(flight_delay), min=min(flight_delay), max=max(flight_delay))
select(to_seatac, origin=="JFK") %>% summarize(mean = mean(flight_delay), min=min(flight_delay), max=max(flight_delay))
filter(flights, origin=="JFK", dest="SEA") %>% summarize(mean = mean(flight_delay), min=min(flight_delay), max=max(flight_delay))
filter(flights, origin=="JFK", dest=="SEA") %>% summarize(mean = mean(flight_delay), min=min(flight_delay), max=max(flight_delay))
filter(flights, origin=="JFK", dest=="SEA") %>% summarize(mean = mean(flight_delay, na.rm = TRUE), min=min(flight_delay, na.rm = TRUE), max=max(flight_delay, na.rm = TRUE))
to_seatac <- filter(flights, dest=="SEA") %>% select(to_seatac, origin, dest, flight_delay)
to_seatac <- (filter(flights, dest=="SEA") %>% select(to_seatac, origin, dest, flight_delay))
to_seatac <- filter(flights, dest=="SEA") %>% select(origin, dest, flight_delay)
filter(flights, origin=="JFK", dest=="SEA") %>% summarize(mean = mean(flight_delay, na.rm = TRUE), min=min(flight_delay, na.rm = TRUE), max=max(flight_delay, na.rm = TRUE))
