arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- arbuthnot %>% select(boy_prop) %>% mean()
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- arbuthnot %>% select(boy_prop) %>% mean()
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- arbuthnot %>% mean(boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy))
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boys))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop), type='variables')
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop), type='variables')
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(data = arbuthnot, yintercept = mean(boy_prop))
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop), type='variables')
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(data = arbuthnot, yintercept =)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- arbuthnot %>% mean(boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% mean(boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot %>% mean(boy_prop)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
arbuthnot %>% summarize(boy_prop_mean = mean(boy_prop))
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- mean(arbuthnot$boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- mean(arbuthnot$boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean, color=red)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(boy_to_girl_ratio = boys / girls, boy_prop = boys / total)
boy_prop_mean <- mean(arbuthnot$boy_prop)
ggplot(data = arbuthnot, aes(x = year, y = boy_prop)) + geom_line() + geom_hline(yintercept = boy_prop_mean)
toupper <- function(word)
c
return
cls
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
fruits  <- substr(lyric, 15, nchar(lyric))
fruits_e <- gsub("a", "ee", lyric)
fruits_o <- gsbu("a", "o", lyric)
lyric_e <- paste(intro, fruits_e, sep=" ")
print(paste(intro, fruits_o, sep=" "))
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
?seq
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
plot(x_range, wave)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("http://www.openintro.org/stat/data/nycflights.R")
glimpse(nycflights)
names(nycflights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("http://www.openintro.org/stat/data/nycflights.R")
glimpse(nycflights)
names(nycflights)
View(nycflights)
View(nycflights)
ggplot(data = nycflights, aes(x=dep_delay)) + geom_histogram()
ggplot(data = nycflights, aes(x=dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x=dep_delay)) + geom_histogram(binwidth = 150)
ggplot(data = nycflights, aes(x=dep_delay)) + geom_histogram(binwidth = 5)
sfo_feb_flights <- nycflights %>% filter(dest = "SFO", month == 2)
# Insert code for exercise 2 here
# (make the sfo_feb_flights dataset and count the number of observations)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
print(nrow(sfo_feb_flights))
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + goem_histogram()
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
median(sfo_feb_flights$arr_delay)
mean(sfo_feb_flights$arr_delay)
# Insert code for exercise 4 here
# (calculate mean and median)
paste("The mean flight delay is", mean(sfo_feb_flights$arr_delay))
paste("The median flight delay is", median(sfo_feb_flights$arr_delay))
# Insert code for exercise 4 here
# (calculate mean and median)
paste("The mean flight delay is", mean(sfo_feb_flights$arr_delay))
paste("The median flight delay is", median(sfo_feb_flights$arr_delay))
# Insert code for exercise 4 here
# (calculate mean and median)
paste("The mean flight delay is", mean(sfo_feb_flights$arr_delay))
paste("The median flight delay is", median(sfo_feb_flights$arr_delay))
# Insert code for exercise 5 here
# (group by, summarize by)
nycflights %>% group_by(month) %>% summarize(median_ad = median(arr_delay), n_flights = n()) %>% arrange(desc(median_ad))
# Insert code for exercise 6 here
# (group by, summarize by)
nycflights %>% group_by(carrier) %>% summarize(median_ad = mean(arr_delay), n_flights = n()) %>% arrange(desc(median_ad))
# Insert code for exercise 7 here
# (group by, summarize by)
nycflights$flight_speed <- nycflights$distance / nycflights$air_time
nycflights %>% group_by(carrier) %>% summarize(median_ad = mean(flight_speed), n_flights = n()) %>% arrange(desc(median_ad))
# Insert code for exercise 8 here
# (make the scatterplot)
nycflights %>% ggplot(aes=(x = distance, y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes=(x = distance, y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes=(x=distance, y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes=(x=distance y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes=(x=distance, y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes(x=distance, y=flight_speed)) + ggscatter()
# Insert code for exercise 8 here
# (make the scatterplot)
ggplot(data=nycflights, aes(x=distance, y=flight_speed)) + geom_point()
nycflights %>% group_by(carrier) %>% summarize(median_ad = mean(distance), n_flights = n()) %>% arrange(desc(median_ad))
# Insert code for exercise 5 here
# (group by, summarize by)
nycflights %>% group_by(origin) %>% summarize(median_ad = median(arr_delay), n_flights = n()) %>% arrange(desc(median_ad))
# Insert code for exercise 5 here
# (group by, summarize by)
nycflights %>% group_by(origin) %>% summarize(median_ad = median(dep_delay), n_flights = n()) %>% arrange(desc(median_ad))
month
```{r}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("http://www.openintro.org/stat/data/nycflights.R")
# Insert code for exercise 2 here
# (make the sfo_feb_flights dataset and count the number of observations)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
print(nrow(sfo_feb_flights))
# Insert code for exercise 4 here
# (calculate mean and median)
paste("The mean flight delay is", mean(sfo_feb_flights$arr_delay))
paste("The median flight delay is", median(sfo_feb_flights$arr_delay))
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "bacon", "oatmeal")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c()
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("burrito bowl")
dinner <- meals$dinner
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
meals[[5]] <- meals[["lunch"]]
View(meals)
View(meals)
print(meals)
print(meals[0:1])
early_meals <- meals[c("brexit", "lunch")]
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
early_meals <- meals[c("brexit", "lunch")]
print(meals)
early_meals <- meals[c("brexit", "lunch")]
help(lappy)
??lapply
??lappy
??lappy
arr <- lappy(meals, length)
??lappy
??lapply
lapply(meals, length)
meal_counts <- lapply(meals, length)
View(meals)
View(meal_counts)
return output_vector
return (output_vector)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
add_pizza(meals$lunch)
add_pizza(meals$dinner)
add_pizza(meals$dinner)
add_pizza(meals$dinner)
better_meals <- lapply(meals, add_pizza)
View(better_meals)
View(better_meals)
output_vector <-  c(input_vector, "pizza")
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-08-exercises/exercise-1/exercise.R', echo=TRUE)
View(better_meals)
View(better_meals)
View(better_meals)
View(better_meals)
install.packages("stringr")
updated_sharks <- c(Sharks, Goblin)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
updated_sharks <- c(Sharks, Goblin)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(sharks, Goblin)
updated_sharks <- c(sharks, "Goblin")
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
updated_sharks <- c(sharks, c("Goblin"))
print(updated_sharks)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[-4]
is.list(shark_length)
shark_length[[4]]
is.list(shark_length[[4]])
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
tea <- 3.50
scone <- 3.00
discount <- 0.90
sales_tax <- 1.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * sales_tax
round(total_after_tax, 2)
tea <- 3.50
scone <- 3.00
discount <- 0.90
sales_tax <- 1.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * sales_tax
round(total_after_tax, 2)
grants = read.csv("data\gates_money.csv")
grants = read.csv("data\\gates_money.csv")
grants = read.csv("data/gates_money.csv")
setwd("~/School/Year 2 Quarter 2/Info_201/exercises/chapter-10-exercises/exercise-4")
grants = read.csv("data/gates_money.csv")
grants = read.csv("data/gates_money.csv")
view(grants)
View(grants)
organization = grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
View(grants)
grants = read.csv("data/gates_money.stringsAsFactors = FALSE")
setwd("~/School/Year 2 Quarter 2/Info_201/exercises/chapter-10-exercises/exercise-4")
grants = read.csv("data/gates_money.stringsAsFactors = FALSE")
grants = read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
nrows(grants)
# How many grants were awarded in 2010?
nrow(grants)
source('~/School/Year 2 Quarter 2/Info_201/exercises/chapter-10-exercises/exercise-4/exercise.R', echo=TRUE)
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000000], )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 100000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 10000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 10000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 5000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000,] )
# How many grants were awarded in 2010 and are greater than $1,000,000?
nrow(grants[grants$start_year == 2010 && grants$total_amount > 1000000,] )
grants$total_amount > 1000000
grants$start_year == 2010
grants$total_amount > 1000000 && grants$start_year == 2010
grants$total_amount > 1000000 + grants$start_year == 2010
grants$total_amount > 1000000 && grants$start_year == 2010
(grants$total_amount > 1000000) && (grants)$start_year == 2010)
filter3 <- filter1 && filter2
filter1 <- grants$total_amount > 1000000
filter2 <- grants$start_year == 2010
filter3 <- filter1 && filter2
knitr::opts_chunk$set(echo = TRUE)
library(oilabs)
sample(Coin_outcomes, size= 1000, replace=TRUE)
sample(coin_outcomes, size= 1000, replace=TRUE)
coin_outcomes <- c("heads","tails")
sample(coin_outcomes, size= 1000, replace=TRUE)
coin_outcomes <- c("heads","tails")
coin_outcomes <- c("heads","tails")
sim_fair_coin <- sample(coin_outcomes, size= 1000, replace=TRUE)
sim_fair_coin %>% table
coin_outcomes <- c("heads","tails")
sim_fair_coin <- sample(coin_outcomes, size= 100, replace=TRUE)
sim_fair_coin %>% table
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
coin_outcomes <- c("heads","tails")
sim_fair_coin <- sample(coin_outcomes, size= 100, replace=TRUE)
sim_fair_coin %>% table
set.seed(111)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,                          prob = c(0.2, 0.8))
sim_unfair_coin %>% table
set.seed(111)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,                          prob = c(0.2, 0.8))
sim_unfair_coin %>% table
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(sim_fair_coin, size = 20, replace = TRUE)
sim_fair_die[sim_fair_die == 3]
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(sim_fair_coin, size = 20, replace = TRUE)
sim_fair_die
sim_fair_die <- sample(die_outcomes, size = 20, replace = TRUE)
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(die_outcomes, size = 20, replace = TRUE)
sim_fair_die <- sample(dice_outcomes, size = 20, replace = TRUE)
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(dice_outcomes, size = 20, replace = TRUE)
sim_fair_die
sim_fair_die[sim_fair_die == 3]
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(dice_outcomes, size = 20, replace = TRUE)
sim_fair_die[sim_fair_die == 3]
set.seed(555)
dice_outcomes <- c(1,2,3,4,5,6)
sim_fair_die <- sample(dice_outcomes, size = 20, replace = TRUE)
sim_fair_die
count(sim_fair_die[sim_fair_die == 3])
(sim_fair_die[sim_fair_die == 3])
group_by(sim_fair_die)
sim_fair_die %>% table
return(data.frame(length= streaklengths))
# Setup code: do not delete
kobe_basket <- read.delim("http://anna-neufeld.github.io/Stat311/oiLabs/Week4/kobe_basket.csv", header=TRUE, sep=",")
calc_streak <- function(shots) {
hits <- c(0, shots=="H", 0)
misses <- which(hits==0)
streaklengths <- diff(misses)-1
return(data.frame(length= streaklengths))
}
kobe_basket %>% filter(game==1, quarter==1) %>% select(shot)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x=length)) + goem_histogram(binwidth=1)
ggplot(data = kobe_streak, aes(x=length)) + geom_histogram(binwidth=1)
summarize(kobe_streak, mean=mean(kobe_streak), median=median(kobe_streak))
View(kobe_streak)
View(kobe_streak)
summarize(kobe_streak, mean=mean(kobe_streak$length), median=median(kobe_streak$length))
kobe_basket %>% filter(game==1, quarter==1) %>% select(shot)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x=length)) + geom_histogram(binwidth=1)
summarize(kobe_streak, mean=mean(kobe_streak$length), median=median(kobe_streak$length))
shot_outcomes <- c("H","M")
sim_basket <- sample(shot_outcomes, size=133, replace=TRUE, prob = c(0.45, 0.55))
sim_basket <- sample(shot_outcomes, size=1, replace=TRUE, prob = c(0.45, 0.55))
sim_basket %>% table
set.seed(500)
sim_basket <- sample(shot_outcomes, size=133, replace=TRUE, prob = c(0.45, 0.55))
sim_basket %>% table
sim_streak <- calc_streak(sim_basket)
max(kobe_streak)
max(sim_streak)
ggplot(data = sim_streak, aes(x=length)) + geom_histogram(binwidth=1)
ggplot(data = kobe_streak, aes(x=length)) + geom_histogram(binwidth=1)
ggplot(data = sim_streak, aes(x=length)) + geom_histogram(binwidth=1)
ggplot(data = results, aes(x=max_length)) + geom_histogram() + geom_vline(xintercept=max(kobe_streak$length), col="red")
set.seed(1)
results <- data.frame(matrix(0, nrow=1000, ncol=3))
names(results) <- c("mean_length", "median_length", "max_length")
for (i in 1:1000) {
simulated_baskets <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
simulated_streaks <-  calc_streak(simulated_baskets)$length
results[i,] <- c(mean(simulated_streaks), median(simulated_streaks), max(simulated_streaks))
}
ggplot(data = results, aes(x=max_length)) + geom_histogram() + geom_vline(xintercept=max(kobe_streak$length), col="red")
ggplot(data = results, aes(x=max_length)) + geom_histogram(binwidth = 1) + geom_vline(xintercept=max(kobe_streak$length), col="red")
set.seed(3111)
coin_outcomes <- c("heads","tails")
sim_fair_coin <- sample(coin_outcomes, size= 100, replace=TRUE)
sim_fair_coin %>% table
